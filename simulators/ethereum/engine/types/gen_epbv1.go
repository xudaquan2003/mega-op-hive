// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*executionPayloadBodyV1Marshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExecutionPayloadBodyV1) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadBodyV1 struct {
		Transactions []hexutil.Bytes     `json:"transactions"  gencodec:"required"`
		Withdrawals  []*types.Withdrawal `json:"withdrawals"`
	}
	var enc ExecutionPayloadBodyV1
	if e.Transactions != nil {
		enc.Transactions = make([]hexutil.Bytes, len(e.Transactions))
		for k, v := range e.Transactions {
			enc.Transactions[k] = v
		}
	}
	enc.Withdrawals = e.Withdrawals
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadBodyV1) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadBodyV1 struct {
		Transactions []hexutil.Bytes     `json:"transactions"  gencodec:"required"`
		Withdrawals  []*types.Withdrawal `json:"withdrawals"`
	}
	var dec ExecutionPayloadBodyV1
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Transactions == nil {
		return errors.New("missing required field 'transactions' for ExecutionPayloadBodyV1")
	}
	e.Transactions = make([][]byte, len(dec.Transactions))
	for k, v := range dec.Transactions {
		e.Transactions[k] = v
	}
	if dec.Withdrawals != nil {
		e.Withdrawals = dec.Withdrawals
	}
	return nil
}
